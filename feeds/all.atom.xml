<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Joao Moreira</title><link href="http://jagmoreira.com/" rel="alternate"></link><link href="http://jagmoreira.com/feeds/all.atom.xml" rel="self"></link><id>http://jagmoreira.com/</id><updated>2017-06-23T00:00:00-05:00</updated><entry><title>I wrote a LaTeX CV template!</title><link href="http://jagmoreira.com/i-wrote-a-latex-cv-template.html" rel="alternate"></link><published>2017-06-23T00:00:00-05:00</published><updated>2017-06-23T00:00:00-05:00</updated><author><name>Joao Moreira</name></author><id>tag:jagmoreira.com,2017-06-23:/i-wrote-a-latex-cv-template.html</id><summary type="html">&lt;p&gt;Presenting the Friggen-Awesome LaTeX template for your CV or resumé.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm currently in the job market looking for a data science-related job. The first step (of many) in applying for a job is polishing up that resumé. It had been a while since I touched my resumé. I had a Word document that was 3-pages long describing in great detail all my &lt;em&gt;academic&lt;/em&gt; accomplishments. While I am of course proud of my publication record and all my conference participations, it was time to actually create a 1-page resumé highlighting my &lt;em&gt;professional&lt;/em&gt; experience and &lt;em&gt;skills&lt;/em&gt; instead.&lt;/p&gt;
&lt;p&gt;I had been thinking for a while about creating a LaTeX CV/resumé, so this was the perfect opportunity to finally do it. I looked around for existing templates.  is a great website with tons of templates. It even has an online editor so you don't have to install LaTeX on you computer to write your CV.&lt;/p&gt;
&lt;p&gt;The most appealing template I found was the &lt;a href="https://www.sharelatex.com/templates/cv-or-resume/fancy-cv"&gt;Fancy CV&lt;/a&gt;, also called by Friggeri CV, originally released by &lt;a href="https://github.com/afriggeri"&gt;Adrian Friggeri&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Original Fancy CV" src="http://jagmoreira.com/images/fanci_cv.png"&gt;&lt;/p&gt;
&lt;p&gt;While the original template is no longer on GitHub, many people have created their own version. Most notably, &lt;a href="https://github.com/Nadorrano"&gt;Nadorrano&lt;/a&gt; created &lt;a href="https://github.com/Nadorrano/cv-friggeri-x"&gt;CV-Friggeri-X&lt;/a&gt;, a variation on the original Fancy CV that uses only open source fonts and adds glyphs for contact info.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Friggeri-X CV" src="http://jagmoreira.com/images/cv_friggeri_x.png"&gt;&lt;/p&gt;
&lt;p&gt;Now, I could have used this template to write my CV... but, I didn't like the glyphs, nor the contact info on the side. So, I did some more searching and found another really awesome template called &lt;a href="https://github.com/posquit0/Awesome-CV"&gt;Awesome-CV&lt;/a&gt; by &lt;a href="https://github.com/posquit0"&gt;posquit0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Awesome CV" src="http://jagmoreira.com/images/awesome_cv.png"&gt;&lt;/p&gt;
&lt;p&gt;Now that is a cool header!&lt;/p&gt;
&lt;p&gt;I knew I wanted this header but I liked the 2-column layout of the Friggeri-X template. So, I set out to create a template that did just that. After a few weeks working on and off on the template, I finally got it working.&lt;/p&gt;
&lt;p&gt;Introducing... the &lt;a href="https://github.com/jagmoreira/Friggen-Awesome-CV"&gt;Friggen-Awesome CV&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Friggen-Awesome CV" src="http://jagmoreira.com/images/friggen_awesome_cv.png"&gt;&lt;/p&gt;
&lt;p&gt;It has a 2-column layout, like the Fancy CV, and a header much like the one in the Awesome CV. It also uses only open source fonts (Roboto for text and FontAwesome for glyphs) and allows you to choose from A4 or Letter paper size. You can find more detailed info in the &lt;a href="https://github.com/jagmoreira/Friggen-Awesome-CV"&gt;template repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was great fun creating this template. While I didn't create it from scratch, I learned a lot about LaTeX internals. Just like with any programming language, you can do a lot with LaTeX variables and conditionals. Yes there are if-statements in LaTex!&lt;/p&gt;
&lt;p&gt;I hope this template will be of great use to others, specially those currently looking for jobs. If you find something broken, have a criticism or some suggestion for improvement, please do submit an &lt;a href="https://github.com/jagmoreira/Friggen-Awesome-CV/issues"&gt;issue&lt;/a&gt; or &lt;a href="https://github.com/jagmoreira/Friggen-Awesome-CV/pulls"&gt;pull request&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;Also, if you are reading this blog and want to learn more about me, here's my own friggen' awesome &lt;a href="http://jagmoreira.com/pdfs/resume.pdf"&gt;resumé&lt;/a&gt;. :-)&lt;/p&gt;
&lt;p&gt;Many thanks to &lt;a href="https://github.com/Nadorrano"&gt;Nadorrano&lt;/a&gt; and &lt;a href="https://github.com/posquit0"&gt;posquit0&lt;/a&gt;, the creators of &lt;a href="https://github.com/Nadorrano/cv-friggeri-x"&gt;CV-Friggeri-X&lt;/a&gt; and &lt;a href="https://github.com/posquit0/Awesome-CV"&gt;Awesome-CV&lt;/a&gt;, respectively, and also to &lt;a href="https://github.com/afriggeri"&gt;Adrian Friggeri&lt;/a&gt; for creating the original &lt;a href="https://www.sharelatex.com/templates/cv-or-resume/fancy-cv"&gt;Fancy CV&lt;/a&gt;.&lt;/p&gt;</content><category term="latex"></category><category term="resume"></category></entry><entry><title>Updating the micro python version of virtual environments</title><link href="http://jagmoreira.com/updating-the-micro-python-version-of-virtual-environments.html" rel="alternate"></link><published>2017-05-13T00:00:00-05:00</published><updated>2017-05-13T00:00:00-05:00</updated><author><name>Joao Moreira</name></author><id>tag:jagmoreira.com,2017-05-13:/updating-the-micro-python-version-of-virtual-environments.html</id><summary type="html">&lt;p&gt;How to systematically update the micro version of python for all virtual environments in your system using pyenv.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: I wrote a &lt;a href="https://gist.github.com/jagmoreira/b922d0524a5b7bc9500ea4b8c372e66b"&gt;gist&lt;/a&gt; to systematically update the micro version of python for all virtual environments in your system using pyenv!&lt;/p&gt;
&lt;p&gt;Python projects should be implemented inside virtual environments (virtualenvs). If you are not doing it yet, then please start. Right now! Virtualenvs are essential to ensure reproducibility and to keep different projects sand-boxed from each other. You specify a &lt;code&gt;requirements.pip&lt;/code&gt; file and a python &lt;strong&gt;A.B&lt;/strong&gt; (major and minor) version and anyone else, including future you, should be able to re-create your project results.&lt;/p&gt;
&lt;p&gt;Yet, there is some flexibility in virtualenvs &lt;em&gt;because of the micro version&lt;/em&gt;. Python releases follow a A.B.C versioning system, where &lt;strong&gt;C&lt;/strong&gt; represents a micro update to a given &lt;strong&gt;A.B&lt;/strong&gt; version. These micro updates are reserved for security and bug fixes. As I write this post, the latest &lt;a href="https://docs.python.org/devguide/index.html#status-of-python-branches"&gt;active&lt;/a&gt; releases from python's &lt;a href="https://www.python.org/downloads/"&gt;official page&lt;/a&gt; are 3.6.1, 3.5.3, and 2.7.13.&lt;/p&gt;
&lt;p&gt;Since virtualenvs are typically only tied to a &lt;strong&gt;A.B&lt;/strong&gt; version, we can improve the security and stability of a project by updating the virtualenv's micro version of python without affecting anything project results.&lt;/p&gt;
&lt;h2&gt;Updating the micro version of a single virtualenv&lt;/h2&gt;
&lt;p&gt;I use pyenv (link) to manage all my version of python, so if I wanted to update the micro version of one of my 3.5.1 projects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv versions
  system
  3.5.1
  3.5.1/envs/proj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First I install the latest 3.5.x version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv install 3.5.3
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I save the packages list of the virtualenvs packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv shell proj
&lt;span class="o"&gt;(&lt;/span&gt;proj&lt;span class="o"&gt;)&lt;/span&gt;$ pip freeze &amp;gt; proj_requirements.pip
&lt;span class="o"&gt;(&lt;/span&gt;proj&lt;span class="o"&gt;)&lt;/span&gt;$ pyenv shell --unset
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now I can safely remove the old 3.5.1 &lt;code&gt;proj&lt;/code&gt;, and create a new &lt;code&gt;proj&lt;/code&gt; based on 3.5.3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv uninstall proj
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
$ pyenv virtualenv 3.5.3 proj
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally I install the packages again to the new venv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv shell proj
&lt;span class="o"&gt;(&lt;/span&gt;proj&lt;span class="o"&gt;)&lt;/span&gt;$ pip install -r proj_requirements.pip

$ pyenv versions
  system
  3.5.1
  3.5.3
  3.5.3/envs/proj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And voilá.&lt;/p&gt;
&lt;p&gt;If you don't use the base 3.5.1 you can now safely uninstall it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv uninstall 3.5.1
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;What if I have a lot of virtualenvs?&lt;/h2&gt;
&lt;p&gt;I hear you. I have 15 different environments spread across both python 2.7 and 3.5 in my lab workstation myself! It would be a pain to go through the above process manually for each one of those virtualenvs, that's why I decided to write a script that does all the work for me!&lt;/p&gt;
&lt;p&gt;The first step is to find all main python versions currently installed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv versions
  system
  2.7.10
  2.7.10/envs/foo
  2.7.10/envs/bar
  2.7.12/envs/baz
  3.5.3
  3.5.3/envs/proj
  foo
  bar
  baz
  proj

  $ pyenv versions --bare &lt;span class="p"&gt;|&lt;/span&gt; grep / &lt;span class="p"&gt;|&lt;/span&gt; cut -f &lt;span class="m"&gt;1&lt;/span&gt; -d / &lt;span class="p"&gt;|&lt;/span&gt; uniq
  2.7.10
  2.7.12
  3.5.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, for each &lt;strong&gt;A.B&lt;/strong&gt; version we search for the latest micro version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="c1"&gt;# First update pyenv to get any new python versions&lt;/span&gt;
pyenv update

&lt;span class="c1"&gt;# Get currently installed main pythons with derived virtualenvs&lt;/span&gt;
&lt;span class="nv"&gt;MAIN_PYTHONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;pyenv versions --skip-aliases --bare &lt;span class="p"&gt;|&lt;/span&gt; grep / &lt;span class="p"&gt;|&lt;/span&gt; cut -f &lt;span class="m"&gt;1&lt;/span&gt; -d / &lt;span class="p"&gt;|&lt;/span&gt; uniq&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; VERSION in &lt;span class="nv"&gt;$MAIN_PYTHONS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# Get the latest micro version for each A.B python&lt;/span&gt;
    &lt;span class="nv"&gt;MAJOR_MINOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$VERSION&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -f 1,2 -d .&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;LATEST_MICRO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;pyenv install -l &lt;span class="p"&gt;|&lt;/span&gt; grep -E &lt;span class="s2"&gt;&amp;quot;(^| )&lt;/span&gt;&lt;span class="nv"&gt;$MAJOR_MINOR&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort -b -V &lt;span class="p"&gt;|&lt;/span&gt; tail -n &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -e &lt;span class="s1"&gt;&amp;#39;s/^[ \t]*//&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# If there are no new micro versions&lt;/span&gt;
    &lt;span class="c1"&gt;# we move on to the next main Python&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$VERSION&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LATEST_MICRO&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;Version &lt;/span&gt;&lt;span class="nv"&gt;$VERSION&lt;/span&gt;&lt;span class="s2"&gt; is already the latest version in the &lt;/span&gt;&lt;span class="nv"&gt;$MAJOR_MINOR&lt;/span&gt;&lt;span class="s2"&gt;.x series.&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;

    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Found a new micro version for python &lt;/span&gt;&lt;span class="nv"&gt;$VERSION&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$VERSION&lt;/span&gt;&lt;span class="s2"&gt; -&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;$LATEST_MICRO&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

$ ./update_envs_micro_python.sh
&lt;span class="o"&gt;(&lt;/span&gt;...pyenv update...&lt;span class="o"&gt;)&lt;/span&gt;
Checking &lt;span class="k"&gt;for&lt;/span&gt; micro version updates &lt;span class="k"&gt;for&lt;/span&gt; python 2.7.10.
Found a new micro version &lt;span class="k"&gt;for&lt;/span&gt; python 2.7.10!
2.7.10 -&amp;gt; 2.7.13
Checking &lt;span class="k"&gt;for&lt;/span&gt; micro version updates &lt;span class="k"&gt;for&lt;/span&gt; python 2.7.12.
Found a new micro version &lt;span class="k"&gt;for&lt;/span&gt; python 2.7.12!
2.7.12 -&amp;gt; 2.7.13
Checking &lt;span class="k"&gt;for&lt;/span&gt; micro version updates &lt;span class="k"&gt;for&lt;/span&gt; python 3.5.3.
Version 3.5.3 is already the latest version in the 3.5.x series.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I only use virtualenvs derived from the &lt;em&gt;vanilla&lt;/em&gt; python versions but it should be easy to adapt the code above for other distributions (anaconda, jython, pypy, etc.).&lt;/p&gt;
&lt;p&gt;Then, for each new micro version, we need to install it, making sure that pip is up-to-date as well (pip 9+ ensures python2-only packages are not installed in python3 environments, and vice-versa):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Install the latest micro and upgrade pip&lt;/span&gt;
pyenv install -s &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LATEST_MICRO&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
pyenv rehash
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PYENV_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LATEST_MICRO&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
pip install --upgrade pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now all we have to do is find all virtualenvs for each major.minor, so we can apply the procedure I first described at the top of the post:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Get all virtual environments for this minor version&lt;/span&gt;
&lt;span class="nv"&gt;VENVS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;pyenv versions --skip-aliases --bare &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="nv"&gt;$VERSION&lt;/span&gt;/ &lt;span class="p"&gt;|&lt;/span&gt; cut -f &lt;span class="m"&gt;3&lt;/span&gt; -d /&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;N_VENVS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$VENVS&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; wc -w&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Found &lt;/span&gt;&lt;span class="nv"&gt;$N_VENVS&lt;/span&gt;&lt;span class="s2"&gt; virtual environments built with python &lt;/span&gt;&lt;span class="nv"&gt;$VERSION&lt;/span&gt;&lt;span class="s2"&gt;.&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; ENV in &lt;span class="nv"&gt;$VENVS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Upgrading micro python version of &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$ENV&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; virtualenv: &lt;/span&gt;&lt;span class="nv"&gt;$VERSION&lt;/span&gt;&lt;span class="s2"&gt;-&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;$LATEST_MICRO&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

    &lt;span class="nv"&gt;ENV_PIP_REQS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__tmp_&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ENV&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_requirements.pip&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PYENV_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ENV&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;     &lt;span class="c1"&gt;# &amp;quot;Activate&amp;quot; the virtualenv&lt;/span&gt;
    pip freeze &amp;gt; &lt;span class="nv"&gt;$ENV_PIP_REQS&lt;/span&gt;
    pyenv uninstall -f &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ENV&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    pyenv virtualenv &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LATEST_MICRO&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ENV&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    pyenv rehash

    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Re-installing &lt;/span&gt;&lt;span class="nv"&gt;$ENV&lt;/span&gt;&lt;span class="s2"&gt; with all its packages.&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# PYENV_VERSION is still set. No need to update it since&lt;/span&gt;
    &lt;span class="c1"&gt;# it&amp;#39;s just a string with the virtualenv name,&lt;/span&gt;
    &lt;span class="c1"&gt;# which did not change.&lt;/span&gt;
    pip install --upgrade pip
    pip install -r &lt;span class="nv"&gt;$ENV_PIP_REQS&lt;/span&gt;

&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Regarding pandas and statsmodels&lt;/h3&gt;
&lt;p&gt;While I was testing my script, I re-learned that installation of older versions of these packages via requirements file will fail unless their required packages are already installed. Dependency management in python projects was a &lt;a href="https://blog.miguelgrinberg.com/post/the-package-dependency-blues"&gt;bit of a pain&lt;/a&gt; &lt;a href="https://glyph.twistedmatrix.com/2016/08/python-packaging.html"&gt;until recently&lt;/a&gt;. My solution for virtualenvs that use old versions of these packages is to install them separately before installing the full requirements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# If numpy is present install it manually, otherwise some&lt;/span&gt;
&lt;span class="c1"&gt;# package installations might fail due to mall-formed&lt;/span&gt;
&lt;span class="c1"&gt;# installation requirements&lt;/span&gt;
&lt;span class="nv"&gt;NUMPY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;grep &lt;span class="nv"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$ENV_PIP_REQS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -n &lt;span class="nv"&gt;$NUMPY&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    pip install &lt;span class="nv"&gt;$NUMPY&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# Installation of old versions of statsmodels may fail due to mall-formed&lt;/span&gt;
&lt;span class="c1"&gt;# installation requirements. To prevent this, we install all other&lt;/span&gt;
&lt;span class="c1"&gt;# packages first then try the full requirements file again&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;grep statsmodels &lt;span class="nv"&gt;$ENV_PIP_REQS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    sed -e &lt;span class="s1"&gt;&amp;#39;/statsmodels/d&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$ENV_PIP_REQS&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; pip install -r /dev/stdin
&lt;span class="k"&gt;fi&lt;/span&gt;
pip install -r &lt;span class="nv"&gt;$ENV_PIP_REQS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The reason statsmodels is done differently is because it has several requirements (numpy, scipy, pandas, patsy) that can all be installed in one go via requirements file, if numpy is already installed. There are probably other packages out there that suffer from the same issues. Adapt as necessary to your purposes.&lt;/p&gt;
&lt;h2&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;I uploaded the full script, with some additional tweaks as a &lt;a href="https://gist.github.com/jagmoreira/b922d0524a5b7bc9500ea4b8c372e66b"&gt;public gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hope it's useful to someone else!&lt;/p&gt;</content><category term="python"></category><category term="bash"></category><category term="pyenv"></category></entry><entry><title>Setting up a new development environment</title><link href="http://jagmoreira.com/setting-up-a-new-development-environment.html" rel="alternate"></link><published>2017-01-03T00:00:00-06:00</published><updated>2017-01-03T00:00:00-06:00</updated><author><name>Joao Moreira</name></author><id>tag:jagmoreira.com,2017-01-03:/setting-up-a-new-development-environment.html</id><summary type="html">&lt;p&gt;Learn how to set up your own personalized development environment on a new machine.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This is an updated version of a &lt;a href="https://amaral.northwestern.edu/resources/guides/setting-new-development-environment"&gt;guide I wrote for the Amaral Lab&lt;/a&gt;. Since writing the original version, I updated Sublime Text to version 3, changed how version control software is configured, and added Homebrew configuration.&lt;/p&gt;
&lt;p&gt;Setting up your development environment on a new computer can be a pain. You start by installing your favorite editor (sublime, vim, emacs, spacemacs, etc.). After that you need to install all your essential packages and plugins (the ones that make you go &lt;em&gt;"How can your live without XX? This is impossible to work."&lt;/em&gt; every time a colleague asks you to check out something on their computer). Then, if you work with a scripting language like python or ruby, you also need to download an interpreter and configure it for your projects. In my work I use pyenv which makes this part super easy. Finally you go into the little details and configure the look and feel of the operating system (shell prompt, aliases, handy functions etc), and also set up all the environment variables that connect all the part... Like I said, setting up a dev environment on a new computer can be a pain.&lt;/p&gt;
&lt;p&gt;Fortunately a lot of programmers have had this problem before, and since most of them hate having to do the same task more than once, they came up with ways to automate this painful and tedious process.&lt;/p&gt;
&lt;p&gt;Nowadays a simple google search will give you access to plenty of scripts for setting up a new dev environment on your system of choice. However during my searches I couldn't find a script that I really liked. They either didn't automate enough parts or automated way more parts than I used. So I decided to write my own custom script, and instead of just sharing it and have it be useful for no one besides myself, I thought I would instead explain how you can make your own setup script.&lt;/p&gt;
&lt;p&gt;This guide will help you set up a development environment on a new Unix system only. That means either Linux flavors or macOS. Sorry Windows!&lt;/p&gt;
&lt;h3&gt;Organizing your dotfiles&lt;/h3&gt;
&lt;p&gt;First things first, in order to automate the setup of your environment you need to have one to begin with. On Unix systems most of the relevant settings for developers are stored in the so-called "dot files". These are are a set of files whose name starts with a “.” and sit in your home directory. Using dotfiles you can customize the look of the terminal, define handy functions aliases and keyboard shortcuts, and configure text-based editors, version control systems, plotting libraries, and much, much more. I'm going to assume you have your own set of dotfiles you are happy with. If you don't have one, just search the web for "sensible dotfiles" and you will find tons of examples.
Here's some tips to get you started:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 - You should always have both a &lt;code&gt;.bashrc&lt;/code&gt; and a &lt;code&gt;.bash_profile&lt;/code&gt;.&lt;/strong&gt;
Most Unix systems run a non-login shell which, by default, reads first the &lt;code&gt;.bash_profle&lt;/code&gt; and then &lt;code&gt;.bashrc&lt;/code&gt; (if they exist); on macOS the shell is a login shell, which &lt;em&gt;does not&lt;/em&gt; read the &lt;code&gt;.bashrc&lt;/code&gt; (&lt;a href="http://apple.stackexchange.com/a/13019"&gt;What's this about &lt;em&gt;login&lt;/em&gt; and &lt;em&gt;non-login&lt;/em&gt; shells?&lt;/a&gt;). So, a good way to keep your configuration multi-system, is to have a &lt;code&gt;.bash_profile&lt;/code&gt; that just reads from the &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat ~/.bash_profile
&lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PS1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f ~/.bashrc &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you can write all your configurations in the &lt;code&gt;.bashrc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2 - Organize your &lt;code&gt;.bashrc&lt;/code&gt; settings by sections.&lt;/strong&gt; The order is not very important. In my &lt;code&gt;.bashrc&lt;/code&gt; I have: Bash options, exports, &lt;code&gt;PATH&lt;/code&gt; variable, aliases, bash completions, prompt, and finally functions. Some terminal commands behave slightly differently on macOS than they do on Linux. This is because macOS is based on BSD (another type of Unix distribution), which defines its own version of popular commands such as &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;ln&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;tail&lt;/code&gt;, and others. On macOS, if you use &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; you can install the Linux versions, which are actually written by the GNU foundation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install coreutils.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then modify your &lt;code&gt;PATH&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Only modify path if both Homebrew and coreutils are installed&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; brew &amp;gt; /dev/null 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -d &lt;span class="k"&gt;$(&lt;/span&gt;brew --prefix coreutils&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c1"&gt;# Add brew-installed GNU core utilities bin&lt;/span&gt;
    &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;brew --prefix coreutils&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/libexec/gnubin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Add man pages for brew-installed GNU core utilities&lt;/span&gt;
    &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;MANPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;brew --prefix coreutils&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/libexec/gnuman:&lt;/span&gt;&lt;span class="nv"&gt;$MANPATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This ensures the GNU versions of those commands are the ones loaded in the shell. If you want to keep your configuration general, you need to add some checks in &lt;code&gt;.bashrc&lt;/code&gt; to make sure your aliases work as expected in both systems. Here's how you can configure your &lt;code&gt;bash_profile&lt;/code&gt; to make &lt;code&gt;ls&lt;/code&gt; have colors in both macOS and other Unixes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Detect which `ls` flavor is in use&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; ls --color &amp;gt;/dev/null 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="c1"&gt;# GNU `ls`&lt;/span&gt;
    &lt;span class="nv"&gt;COLORFLAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--color&amp;#39;&lt;/span&gt;
    &lt;span class="nv"&gt;GROUPDIRS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--group-directories-first&amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# GNU ls has much finer resolution so it&amp;#39;s better to put it in its own file&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; dircolors &amp;gt;/dev/null 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="o"&gt;[&lt;/span&gt; -r ~/.dir_colors &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dircolors -b ~/.dir_colors&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="c1"&gt;# OS X `ls`&lt;/span&gt;
    &lt;span class="nv"&gt;COLORFLAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-G&amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# OS X `ls` does not have this option&lt;/span&gt;
    &lt;span class="nv"&gt;GROUPDIRS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# ls color generator: http://geoff.greer.fm/lscolors/&lt;/span&gt;
    &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LSCOLORS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ExGxFadxCxDaDaabagacad
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ls  &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GROUPDIRS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;COLORFLAG&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;3 - If you &lt;code&gt;.bashrc&lt;/code&gt; is getting too large, it might be good to move some sections to their own separate files and then source them from the &lt;code&gt;.bashrc&lt;/code&gt;.&lt;/strong&gt; Here I have my prompt customization and my bash functions defined elsewhere:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; FILE in ~/.&lt;span class="o"&gt;{&lt;/span&gt;bash_prompt,bash_functions&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt; -f &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$FILE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; . &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$FILE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nb"&gt;unset&lt;/span&gt; FILE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;4 - It's not that important, but to keep your shell environment clean, be sure to &lt;code&gt;unset&lt;/code&gt; any variables in your bash files that are not exported nor defined as local.&lt;/strong&gt; Otherwise they will always be defined in your shell sessions.&lt;/p&gt;
&lt;p&gt;So these are my dotfiles that I want to have in place in all my development environments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.bash_functions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.bash_prompt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.bash_profile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.gitconfig&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.gitignore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.hgrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.hgignore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.vimrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.matplotib/matplotlibrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because I use ssh a lot to connect between the lab computers I accumulated my own set of ssh configurations so I'm adding this file as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.ssh/config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sublime Text configuration files&lt;/h3&gt;
&lt;p&gt;Some editors keep their configurations files in a dedicated location. If that's your case you need to find it and take note of the files/folders you need when starting again from scratch. Sublime Text, my editor of choice, keeps files in of these locations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu: &lt;code&gt;~/.config/sublime-text3/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;macOS: &lt;code&gt;~/Library/Application Support/Sublime Text 3/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Sublime you actually should only copy files from your User folder, namely settings, custom build systems, snippets, and theme files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*.sublime-settings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*.sublime-build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*.sublime-snippet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*.sublime-theme&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*.tmTheme&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Writing the installer script&lt;/h3&gt;
&lt;p&gt;Now the real work begins! We want a script or series of scripts that we can run on any new system that copies all the files for us. We want this script to be available from anywhere so we should really place it somewhere online. GitHub and Bitbucket are some of the most popular platforms for this purpose. Pick whichever one you're most comfortable with, noting that by default GitHub repos are public while Bitbucket repos are private. Here I'm using GitHub.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir /path/to/your/project
$ &lt;span class="nb"&gt;cd&lt;/span&gt; /path/to/your/project
$ git init
$ git remote add origin git@bitbucket.org:joao_moreira/dotfiles.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we just copy our files inside the repo. Here's what mine looks like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -R -1 **
Brewfile
locate_sublime_config.sh
setup_dev_env.sh

dotfiles:
bash_functions
bash_profile
bash_prompt
bashrc
dir_colors
gitignore
matplotlibrc
screenrc
ssh_config
vimrc

sublime_configs/Packages/User:
&lt;span class="o"&gt;(&lt;/span&gt;All my Sublime Text stuff&lt;span class="o"&gt;)&lt;/span&gt;

vc_files: &lt;span class="o"&gt;(&lt;/span&gt;More on these later&lt;span class="o"&gt;)&lt;/span&gt;
gitconfig
hgrc
vc_settings.template

$ git add .
$ git commit -m “Add dotfiles and sublime config”
$ git push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alright. We have our files safely in our repo. Now we just need a script to install these files on demand.&lt;/p&gt;
&lt;h4&gt;Main dotfiles&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat setup_dev_env.sh
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# Find full directory name where this script is located&lt;/span&gt;
&lt;span class="c1"&gt;# http://stackoverflow.com/a/246128&lt;/span&gt;
&lt;span class="nv"&gt;CWD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt; dirname &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="p"&gt;[0]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;pwd&lt;/span&gt; &lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;Sym-linking dotfiles...&amp;quot;&lt;/span&gt;
ln -isv &lt;span class="nv"&gt;$CWD&lt;/span&gt;/dotfiles/bash_prompt ~/.bash_prompt
ln -isv &lt;span class="nv"&gt;$CWD&lt;/span&gt;/dotfiles/bash_functions ~/.bash_functions
ln -isv &lt;span class="nv"&gt;$CWD&lt;/span&gt;/dotfiles/bash_profile ~/.bash_profile
ln -isv &lt;span class="nv"&gt;$CWD&lt;/span&gt;/dotfiles/screenrc ~/.screenrc
ln -isv &lt;span class="nv"&gt;$CWD&lt;/span&gt;/dotfiles/dir_colors ~/.dir_colors
ln -isv &lt;span class="nv"&gt;$CWD&lt;/span&gt;/dotfiles/gitignore ~/.gitignore
ln -isv &lt;span class="nv"&gt;$CWD&lt;/span&gt;/dotfiles/vimrc ~/.vimrc

&lt;span class="c1"&gt;# Matplotlib config lives in different places depending on the OS&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;uname&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Darwin&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    ln -isv &lt;span class="nv"&gt;$CWD&lt;/span&gt;/dotfiles/matplotlibrc ~/.matplotlib/matplotlibrc
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;uname&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Linux&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    ln -isv &lt;span class="nv"&gt;$CWD&lt;/span&gt;/dotfiles/matplotlibrc ~/.config/matplotlib/matplotlibrc
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;done!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, this script actually creates a symbolic link to the dotfiles in our home directory. This way every time you change your dotfiles you don't have to worry about copying your changes to the "gold standard" dotfiles, you already did it! Just remember to commit your changes to the repo, so they will apply the next time you need to start fresh.
&lt;strong&gt;NOTE&lt;/strong&gt;: If you are already have some dotfiles in your home folder ths script will ask if you want to override them or not.&lt;/p&gt;
&lt;h4&gt;Git and Mercurial configuration files&lt;/h4&gt;
&lt;p&gt;Since these config files typically have your user name and email, you may want to keep them out of the repository, specially if your dotfiles repo is a public one. Yet it's still nice to be able to install them automatically. I solved this issue using a 3-step process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;All non-sensitive configurations (basically everything except username and email) I place in version-controlled files, which are put in place using rsync:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsync -abi &lt;span class="nv"&gt;$CWD&lt;/span&gt;/vc_files/hgrc ~/.hgrc
rsync -abi &lt;span class="nv"&gt;$CWD&lt;/span&gt;/vc_files/gitconfig ~/.gitconfig
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then I have a separate sub-script &lt;code&gt;vc_files/vc_settings.local&lt;/code&gt;, which is not in the repo, that adds username and email to those files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat vc_files/vc_settings.template
&lt;span class="c1"&gt;# Version control settings&lt;/span&gt;
&lt;span class="c1"&gt;# Not in the repository, to prevent people from accidentally committing under my name&lt;/span&gt;

&lt;span class="c1"&gt;# Git credentials&lt;/span&gt;
git config --global user.name &lt;span class="s2"&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;
git config --global user.email &lt;span class="s2"&gt;&amp;quot;john.doe@mail.com&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Mercural credentials&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.hgrc
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[ui]&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.hgrc
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;username = Jonh Doe &amp;lt;doe@mail.com&amp;gt;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.hgrc
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[trusted]&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.hgrc
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;users = john_doe&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.hgrc
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;groups = john_doe&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.hgrc

&lt;span class="o"&gt;(&lt;/span&gt;modify the template file with your own settings&lt;span class="o"&gt;)&lt;/span&gt;

$ cp vc_files/vc_settings.template vc_files/vc_settings.local
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the &lt;code&gt;vc_files/vc_settings.template&lt;/code&gt; is version-controlled. This way you don't have to rely too much on memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This sub-script is called during the installation script after the above rsync step:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;... rest of setup_dev_env.sh&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Installing local configuration...&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;VC_LOCAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$CWD&lt;/span&gt;&lt;span class="s2"&gt;/vc_files/vc_settings.local&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;VC_TEMPLATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$CWD&lt;/span&gt;&lt;span class="s2"&gt;/vc_files/vc_settings.template&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f &lt;span class="nv"&gt;$VC_LOCAL&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="nv"&gt;$VC_LOCAL&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$VC_LOCAL&lt;/span&gt;&lt;span class="s2"&gt; not found. Did you create it from the template file?&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;\t&lt;/span&gt;$&lt;span class="s2"&gt; cp &lt;/span&gt;&lt;span class="nv"&gt;$VC_TEMPLATE&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$VC_LOCAL&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Homebrew installation (macOS only)&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; is the awesome package manager for macOS. It performs the same function as apt-get on Ubuntu. I use it to manage most of my non-system packages. Fortunately Homebrew is super easy to install programmatically, and using the &lt;code&gt;bundle&lt;/code&gt; tap and a &lt;code&gt;Brewfile&lt;/code&gt;, you can install all your packages in one fell swoop. The &lt;code&gt;Brewfile&lt;/code&gt; lists all your installed packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew tap Homebrew/bundle
$ brew bundle
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These two commands create the &lt;code&gt;Brewfile&lt;/code&gt; mentioned above. This is Homebrew's version of python's pip requirements file or ruby's Gemfile.&lt;/p&gt;
&lt;p&gt;Now we can write the next section of your setup script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Installing Homebrew and useful packages...&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;uname&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Darwin&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;

    &lt;span class="c1"&gt;# Install homebrew if it does not yet exist&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; ! &lt;span class="nb"&gt;type&lt;/span&gt; brew &amp;gt;/dev/null 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        /usr/bin/ruby -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;

    &lt;span class="c1"&gt;# Then install the packages using Homebrew-bundle&lt;/span&gt;
    brew tap Homebrew/bundle
    ln -isv &lt;span class="nv"&gt;$CWD&lt;/span&gt;/Brewfile ~/Brewfile
    brew bundle -v
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Sublime Text configuration&lt;/h4&gt;
&lt;p&gt;Here I can't use symlinks because they won't capture any eventual files that will be created if I install any new sublime packages. To account for this I use rsync to keep the configuration synced to the repo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;... rest of setup_dev_env.sh&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;Configuring Sublime Text...&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;SUBL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$CWD&lt;/span&gt;/locate_sublime_config.sh&lt;span class="k"&gt;)&lt;/span&gt;
rsync -tprhm &lt;span class="nv"&gt;$CWD&lt;/span&gt;/sublime_configs/ &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SUBL&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;done!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will sync the configuration files from the repo to the sublime installation location.
Then in my &lt;code&gt;.bash_functions.sh&lt;/code&gt; I have a function that does the reverse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Backup sublime text settings&lt;/span&gt;
backup_sublime&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;REPO_LOCATION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;locate_dev_repo&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;SUBL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$REPO_LOCATION&lt;/span&gt;/locate_sublime_config.sh&lt;span class="k"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;echo&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;Backing up Sublime Text configuration...&amp;quot;&lt;/span&gt;
    rsync -tprhm &lt;span class="se"&gt;\&lt;/span&gt;
        --include&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Packages/User/*.sublime-settings&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        --include&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Packages/User/*.sublime-snippet&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        --include&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Packages/User/*.sublime-build&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        --include&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Packages/User/*.sublime-theme&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        --include&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Packages/User/*.tmTheme&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        --include &lt;span class="s2"&gt;&amp;quot;*/&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        --exclude&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        --delete-excluded &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SUBL&lt;/span&gt;&lt;span class="s2"&gt;/&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$REPO_LOCATION&lt;/span&gt;&lt;span class="s2"&gt;/sublime_configs&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;done!&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If I change any sublime settings all I need to do is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ backup_sublime
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and those settings will be backed up!&lt;/p&gt;
&lt;p&gt;The line &lt;code&gt;local REPO_LOCATION=$(locate_dev_repo)&lt;/code&gt; calls a &lt;a href="https://github.com/jagmoreira/dotfiles/blob/master/dotfiles/bash_functions"&gt;function&lt;/a&gt; that does a more complicated version of "Find full directory name where this script is located". You can find it &lt;a href="http://stackoverflow.com/a/246128"&gt;here&lt;/a&gt;. The reason we can't use the one-liner from earlier (see definition of &lt;code&gt;$CWD&lt;/code&gt;) is that when you call this function, &lt;code&gt;.bash_functions.sh&lt;/code&gt; will be a symlink, and we need a recursive expression that can "dereference" the link.&lt;/p&gt;
&lt;p&gt;Also, if you're scratching your head at the rsync &lt;code&gt;--include&lt;/code&gt; syntax... I've been there too. It took me quite a while to get it to work properly. Basically the reason you have to be so verbose in the file specification is that rsync include/exclude rules are applied to each directory in a depth-first-search manner. If you don't do it this way you either sync all files in all directories or no files at all!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;locate_sublime_config.sh&lt;/code&gt; is a handy little script that tries to guess which system you're running and returns the location to sublime settings location:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat locate_sublime_config.sh
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# Finds the location of Sublime Text configurations in several systems&lt;/span&gt;

&lt;span class="nv"&gt;MACOS_DEFAULT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/Library/Application Support/Sublime Text 3&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;LINUX_DEFAULT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.config/sublime-text-3&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -d &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$MACOS_DEFAULT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nv"&gt;SUBL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$MACOS_DEFAULT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -d &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LINUX_DEFAULT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nv"&gt;SUBL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LINUX_DEFAULT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;SUBL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SUBL&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;unset&lt;/span&gt; SUBL
&lt;span class="nb"&gt;unset&lt;/span&gt; MACOS_DEFAULT
&lt;span class="nb"&gt;unset&lt;/span&gt; LINUX_DEFAULT
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Installing pyenv&lt;/h4&gt;
&lt;p&gt;I work mainly with python so I include &lt;a href="https://github.com/yyuu/pyenv"&gt;pyenv&lt;/a&gt; in my setup script. Instead of being dependent on whichever version ship with the OS, with &lt;code&gt;pyenv&lt;/code&gt; I can have concurrent, self-contained, python installations. If you're interested in trying it out check out &lt;a href="http://jagmoreira.com/pyenv-tutorial.html"&gt;my pyenv tutorial&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Fortunately pyenv has an automatic installer, so we just need one more line in our install script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;... rest of setup_dev_env.sh&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;uname&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Linux&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Installing pyenv...&amp;quot;&lt;/span&gt;
    curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer &lt;span class="p"&gt;|&lt;/span&gt; bash
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On a mac machine pyenv is installed as a Homebrew formula so this step is skipped.&lt;/p&gt;
&lt;p&gt;And that's it! With this installer you can be sure to speed up the setup of your development environment.&lt;/p&gt;
&lt;h3&gt;More suggestions&lt;/h3&gt;
&lt;p&gt;If you want to get fancier with your dev setup here are some suggestions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add some command line flags to check for existing files, select what to install, etc.&lt;/li&gt;
&lt;li&gt;For Linux, add a section in &lt;code&gt;setup_dev_env.sh&lt;/code&gt; that actually installs Sublime Text.&lt;/li&gt;
&lt;li&gt;For macOS, you can add a dotfile to configure pretty much anything in the OS. More info &lt;a href="https://github.com/mathiasbynens/dotfiles/blob/master/.osx"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Acknowledgments&lt;/h3&gt;
&lt;p&gt;When writing this guide and my own dotfiles I relied heavily on these great github repos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mathiasbynens/dotfiles"&gt;https://github.com/mathiasbynens/dotfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/necolas/dotfiles"&gt;https://github.com/necolas/dotfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/miohtama/sublime-helper"&gt;https://github.com/miohtama/sublime-helper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Their authors deserve most of the credit for this guide!&lt;/p&gt;</content><category term="dotfiles"></category><category term="bash"></category></entry><entry><title>R v Python: Dawn of Analytics</title><link href="http://jagmoreira.com/r-v-python-dawn-of-analytics.html" rel="alternate"></link><published>2016-07-07T00:00:00-05:00</published><updated>2016-07-07T00:00:00-05:00</updated><author><name>Joao Moreira</name></author><id>tag:jagmoreira.com,2016-07-07:/r-v-python-dawn-of-analytics.html</id><summary type="html">&lt;p&gt;A fresh yet slightly biased perspective on the recent data science language war.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've just completed a 3-month internship at a startup that does data consulting for chemical engineering companies. It was a great experience overall and I learned a lot, including how to program in R. You see, the Amaral Lab (where I'm currently doing a PhD) is almost exclusively a Python lab. Every now and then other languages attempt to break in but they never get very far (looking at you Matlab). So, among other reasons, I saw this internship as a good opportunity to learn R since it is one of the main programming languages used in the Data Science world in addition to Python.&lt;/p&gt;
&lt;p&gt;A simple google search will yield &lt;a href="https://www.google.com/search?q=R+vs+python"&gt;tons of R vs. Python comparisons&lt;/a&gt; and people can be very entrenched in either camp. Regardless, not having read such a comparison (true!) before starting my internship I thought I would try to share my fresh yet slightly biased perspective on this data science language war by focusing on a few key points.&lt;/p&gt;
&lt;p&gt;Python is a general-purpose programming language created by Guido van Rossum in 1991. It's a high-level programming language built with a focus on readability and simplicity of syntax. Despite this (or because of this) it is an extremely popular language used in many applications, with an extensive &lt;a href="https://pypi.python.org/pypi"&gt;library&lt;/a&gt; of third-party packages. R is a programming language created by Ross Ihaka and Robert Gentleman in 1993. Unlike Python, R was developed mainly for use in statistical analysis. Because of its specificity, R is faster than Python in some computations. Just like Python, R also has a very large &lt;a href="https://cloud.r-project.org"&gt;repository&lt;/a&gt; of packages.&lt;/p&gt;
&lt;p&gt;In terms of syntax, both languages have dynamic typing (no need to specify the type of a variable before assigning a value to it), support loops and conditionals, and use logic and math symbols in mostly the same ways. Python is famous for its use of indentation to delimit blocks of code while R is more "classic" in that it requires curly braces for any block of code longer than a single line.&lt;/p&gt;
&lt;p&gt;In R, variable types (number, string, logical, etc.) can be either a single value or a vector of values, whereas Python has both simple variable types (int, float, string, bool) and collection types (list, tuple, etc.). R also allows lists of variables which are not necessarily vectors! Sometimes, in order to achieve the desired behavior you need to unlist a variable first. I found this very baffling at first. Yet, because of R's built-in vector capabilities there's very little need for explicit for-loops. Consequently, a vector operation in R is usually faster than the equivalent for-loop-based operation. Similar performance in Python would require the array datatype provided by the numpy package.&lt;/p&gt;
&lt;p&gt;The main structure used to analyse data is arguably the dataframe. It's essentially a table of data with convenient properties that allow for manipulation of whole columns/rows of data. It exists natively in R but often the &lt;a href="https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html"&gt;dplyr&lt;/a&gt; package is used to expand the dataframe manipulation tools. Python also has dataframes via the &lt;a href="http://pandas.pydata.org"&gt;Pandas&lt;/a&gt; package. In my experience, both languages provide very similar dataframe functionality.&lt;/p&gt;
&lt;p&gt;A very big and important difference between R and Python is how they organize documentation. In R, documentation for several related functions are grouped together. First there's a list of all related functions, then a table with the combined arguments of all the functions, followed by a wall of text explaining what each function does and what the return values are. For an example, see the page for &lt;a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/grep.html"&gt;grep&lt;/a&gt;. In Python, every function is instead documented separately. The arguments and return value are always listed but not always fully explained. The closest Python equivalent to R's grep is the &lt;a href="https://docs.python.org/3/library/re.html"&gt;re module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ultimately, most data scientists seek to share their work online. This entails creating a web-app to showcase data and/or visualization while hosting it in a server somewhere. Python users typically turn to &lt;a href="https://www.djangoproject.com"&gt;Django&lt;/a&gt; or &lt;a href="http://flask.pocoo.org"&gt;Flask&lt;/a&gt; for the app creation. This process can be quite cumbersome as, much like Python itself, these frameworks are general purpose: Flask is just a bare-bones package for web apps while the more powerful Django has a &lt;a href="https://docs.djangoproject.com/en/1.9/intro/"&gt;7-part tutorial&lt;/a&gt; on how to make a simple poll!
The process is much easier with R. Using &lt;a href="http://shiny.rstudio.com"&gt;Shiny&lt;/a&gt;, a R-based web framework, you can have an interactive web app with plots up and running locally in just a few minutes.&lt;/p&gt;
&lt;p&gt;If you're starting to learn how to program in Python you may be using the excellent &lt;a href="http://jupyter.org"&gt;Jupyter Notebook&lt;/a&gt;. This browser-based programming tool is great for quick coding and data visualization. The &lt;a href="https://irkernel.github.io"&gt;R kernel&lt;/a&gt; for Jupyter is relatively new so there are still some kinks, but the tool is in active development so expect improvements soon. Still, R in Jupyter already allows for much of the same testing/visualization available via the python kernel. A solid, and much more powerful, alternative for R programming is &lt;a href="https://www.rstudio.com"&gt;RStudio&lt;/a&gt; (Shiny was built by the RStudio people). It's a fully featured IDE that is very easy to set up.&lt;/p&gt;
&lt;p&gt;So, where do I stand on this great war? ... Well, nowhere really. As is often the case, the truth lies somewhere in the middle. As I outlined above, Python and R have different strengths and are by no means mutually exclusive. Why choose a single language for all things when you can mix the best of both worlds?&lt;/p&gt;</content><category term="python"></category><category term="R"></category></entry><entry><title>Dataclysm: The very best of</title><link href="http://jagmoreira.com/dataclysm-the-very-best-of.html" rel="alternate"></link><published>2015-02-25T00:00:00-06:00</published><updated>2015-02-25T00:00:00-06:00</updated><author><name>Joao Moreira</name></author><id>tag:jagmoreira.com,2015-02-25:/dataclysm-the-very-best-of.html</id><summary type="html">&lt;p&gt;I recently read Dataclysm by Christian Rudder. These are some of my favorite stories from this book.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently read &lt;a href="http://dataclysm.org"&gt;Dataclysm&lt;/a&gt; by &lt;a href="https://twitter.com/christianrudder"&gt;Christian Rudder&lt;/a&gt;. If you don't know him, Christian Rudder is one of the founders of &lt;a href="https://www.okcupid.com"&gt;OkCupid&lt;/a&gt;, a very popular online dating website.&lt;/p&gt;
&lt;p&gt;In OKCupid, as in other dating websites, users create a profile, put up some pictures, and write some stuff about themselves. They can then rate other users and send them private messages with the purpose of getting a date and, if they are lucky, find that special someone. When you're creating your profile and from time to time, the website also asks you several questions, some of their answers will be kept private, others will be put up on their profile pages.&lt;/p&gt;
&lt;p&gt;OKCupid website has a companion blog, &lt;a href="http://blog.okcupid.com"&gt;OkTrends&lt;/a&gt;, where its creators (the DataCupids!) discuss and analyze trends and stereotypes, debunk myths, give advice, and much more, all using data from OKCupid. Dataclysm takes some of the most popular stories from this blog, expands them, and adds in a few more external datasets (Twitter, Facebook, Reddit, just to name a few) for extra punch.&lt;/p&gt;
&lt;p&gt;Dataclysm is essentially about making sense of Big Data. It's about how, faced with a deluge (cataclysm) of data, we can use good data analysis to draw great insights. More generally the book presents an uplifting message that many insights that would otherwise have required years of work, expensive setups, and many test subjects, are now possible with careful analysis of existing datasets. Instead of doing an intensive review of the book, which is but a simple google search away, I will instead highlight some of my favorite stories from the book.&lt;/p&gt;
&lt;h3&gt;Men of all ages prefer 20 year old women.&lt;/h3&gt;
&lt;p&gt;While this may seem shocking at first it actually make some sense from a biological perspective. Males are hardwired to "spread their seed" so it makes sense that they would look for the most fertile females. In contrast, women exhibit much more socially acceptable preferences: women under 30 prefer men slightly older than themselves; women over 30 prefer men slightly younger than themselves, although never going above 40. Does this mean the human race is doomed? Are all men perverts? Probably not. When looking at the actual messaging rates for men, the datacupids found that men actually message women who are at most 9 years younger than them. This is possibly due to social stigma.&lt;/p&gt;
&lt;h3&gt;Is Twitter degrading our language?&lt;/h3&gt;
&lt;p&gt;As you may know, Twitter messages are limited to 140 characters. Because of this apparent restriction it did not take long before people started predicting that language skills would begin to degrade with increasing Twitter use. That, in fact, did not happen. The datacupids compared the most common words on Twitter with those from the &lt;a href="https://en.wikipedia.org/wiki/Most_common_words_in_English"&gt;Oxford English Corpus&lt;/a&gt; (OEC) (the &lt;em&gt;de facto&lt;/em&gt; repository of modern english words) and found that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The average Twitter word is 4.3 characters long compared to 3.4 in the OEC;&lt;/li&gt;
&lt;li&gt;Twitter's top 100 word list which do not show up in the OEC are heavily related to feelings and declarative nouns such as home, life, best, today, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, in fact, Twitter's limit of 140 characters is not a restriction but a catalyst for innovation.  "Twitterites" increase the information density of their communications. They jump straight to the point, be it breakfast or landing on comets.
&lt;strong&gt;Myth busted!&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Love is blind.&lt;/h3&gt;
&lt;p&gt;A couple of years ago, to conclusively prove that love is blind, OKCupid removed all profiles photos from the website for a few hours. Well, not really. It was actually to promote a mobile app called &lt;a href="http://en.wikipedia.org/wiki/Crazy_Blind_Date"&gt;Crazy Blind Date&lt;/a&gt;. During that day, the number of messages exchanged on the website abruptly dropped to almost zero! While the app itself lasted only a few months, it still managed to serve blind dates to about 10,000 people. How did they feel about those blind dates? &lt;a href="http://blog.okcupid.com/index.php/we-experiment-on-human-beings/"&gt;&lt;em&gt;They loved them&lt;/em&gt;!&lt;/a&gt; Users, both male and female, reported having a great time, regardless of the other person's attractiveness. Maybe there is some truth to this myth after all.&lt;/p&gt;
&lt;h3&gt;There are no borders anymore.&lt;/h3&gt;
&lt;p&gt;This one isn't really a story but a whole chapter providing evidence to something that is becoming more and more evident and that yet many world leaders still refuse to accept for whatever reason: Physical borders not cultural borders. The internet has totally redefined how we can chart cultural similarity. A few years ago &lt;a href="http://petewarden.com/about/"&gt;Pete Warden&lt;/a&gt; scrapped Facebook data and calculated the clusters from the USA user connections. He &lt;a href="http://petewarden.com/2010/02/06/how-to-split-up-the-us/"&gt;found&lt;/a&gt; that people belonged to one of 7 "states" instead of the physical 50. In a maybe-not-so-different context, the datacupids found a totally different set of borders. Reddit, the front page of the internet, is organized into thousand of themed "subreddits". Looking at the most popular ones, and the frequency of posts across the different subreddits, the datacupids &lt;a href="http://www.slate.com/articles/technology/technology/2014/10/mapmaking_using_reddit_okcupid_twitter_and_other_social_media_websites.html"&gt;found&lt;/a&gt; a thriving "country" whose "state" borders are defined by common interests and location defined by similarity of interests.&lt;/p&gt;</content><category term="data science"></category><category term="review"></category></entry><entry><title>Pyenv Tutorial</title><link href="http://jagmoreira.com/pyenv-tutorial.html" rel="alternate"></link><published>2014-07-07T00:00:00-05:00</published><updated>2014-07-07T00:00:00-05:00</updated><author><name>Joao Moreira</name></author><id>tag:jagmoreira.com,2014-07-07:/pyenv-tutorial.html</id><summary type="html">&lt;p&gt;Meet pyenv: a simple Python version management tool.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Meet &lt;a href="https://github.com/yyuu/pyenv"&gt;pyenv&lt;/a&gt;: a simple Python version management tool. Previously known as Pythonbrew, pyenv lets you change the global Python version, install multiple Python versions, set directory (project)-specific Python versions, and yes create/manage virtual python environments ("virtualenv's"). All this is done on *NIX-style machines (Linux and OS X) without depending on Python itself and it works at the user-level–no need for any &lt;code&gt;sudo&lt;/code&gt; commands. So let's start!&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Follow the &lt;a href="https://github.com/yyuu/pyenv#installation"&gt;installation instructions&lt;/a&gt; or use the &lt;a href="https://github.com/yyuu/pyenv-installer"&gt;automatic installer&lt;/a&gt;. If you're using a Mac, I highly recommend installing pyenv with &lt;a href="https://github.com/yyuu/pyenv#homebrew-on-mac-os-x"&gt;Homebrew&lt;/a&gt; (none of that MacPorts shenanigans). Whichever way you decide to go, after checking out the repository, be sure to add a couple of lines to your &lt;code&gt;.bashrc&lt;/code&gt; (&lt;code&gt;.bash_profile&lt;/code&gt; on Mac) to enable pyenv's auto-complete functionality.&lt;/p&gt;
&lt;h3&gt;Linux/OS X Copy-Paste Install&lt;/h3&gt;
&lt;p&gt;On a Mac replace &lt;code&gt;.bashrc&lt;/code&gt; with &lt;code&gt;.bash_profile&lt;/code&gt; below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~$ git clone git://github.com/yyuu/pyenv.git .pyenv
~$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
~$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
~$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(pyenv init -)&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
~$ &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;pyenv Suite Installer&lt;/h3&gt;
&lt;p&gt;This is the one-liner provided by the &lt;a href="https://github.com/yyuu/pyenv-installer"&gt;automatic installer&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Walkthrough&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~$ pyenv global
system
~$ pyenv versions
* system (set by /home/staff/jmoreira/.pyenv/version)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Usually you will only have one version of python installed, the system-wide version. That's what's shown in the above command. pyenv now allows you to expand upon this version. Let's start by installing another python version. For instance, let's go now to the cutting edge of python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~$ pyenv install 3.4.0
Installing readline-6.3...
Installed readline-6.3 to /home/staff/jmoreira/.pyenv/versions/3.4.0

Installing Python-3.4.0...
Installed Python-3.4.0 to /home/staff/jmoreira/.pyenv/versions/3.4.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(By the way, there is no need to memorize these. &lt;code&gt;pyenv install -list&lt;/code&gt; will show all available Python versions to install).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~$ pyenv versions
* system (set by /home/staff/jmoreira/.pyenv/version)
  3.4.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pyenv now lists two python versions. To use python 3.4 as the global one we do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv global 3.4.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also use pyenv to define a project-specific, or local, version of Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~$ pyenv global system

~$ mkdir cuting_edge
~$ cd cuting_edge/
~/cutting_edge$ pyenv local 3.4.0
~/cutting_edge$ python -V
Python 3.4.0
~/cutting_edge$ cd ..
~$ python -V
Python 2.7.6
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's as simple as that.&lt;/p&gt;
&lt;h2&gt;Virtual Environments&lt;/h2&gt;
&lt;p&gt;To other virtualenv users, the idea of a local Python might seem familiar. Indeed, a local Python created from pyenv is almost like a Python virtual environment. The main difference is that pyenv actually copies an entire Python installation every time you create a new pyenv version. In contrast, virtualenv makes use of symbolic links to decrease the size of the virtualenv's.
If you can't function without your virtual environments anymore then fear not, for there is a plugin for that: &lt;code&gt;pyenv-virtualenv&lt;/code&gt;. This plugin adds complete virtualenv functionality to pyenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
source ~/.bashrc

~$ mkdir virtual_env
~$ cd virtual_env/
~/virtual_env$ pyenv virtualenv 3.4.0 venv
Ignoring indexes: https://pypi.python.org/simple/
Requirement already satisfied (use --upgrade to upgrade): setuptools in /home/staff/jmoreira/.pyenv/versions/venv/lib/python3.4/site-packages
Requirement already satisfied (use --upgrade to upgrade): pip in /home/staff/jmoreira/.pyenv/versions/venv/lib/python3.4/site-packages
Cleaning up...

~/virtual_env$ pyenv versions
* system (set by /home/staff/jmoreira/.pyenv/version)
  3.4.0
  lab_web
  venv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I used Python 3.4 to create the virtualenv (Note that if you want to create a virtualenv from the system Python, then virtualenv needs to be installed at the system level as well).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/virtual_env$ pyenv activate venv
(venv) ~/virtual_env$ python -V
Python 3.4.0
(venv) ~/virtual_env$ pip list
pip (1.5.4)
setuptools (2.1)
(venv) ~/virtual_env$ pyenv deactivate
~/virtual_env
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This last command is the recommended way to deactivate the virtualenv. This ensures that pyenv remains working as normal after you leave the virtualenv.&lt;/p&gt;
&lt;p&gt;pyenv's magic works because it actually redefines your Python command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~$ which python
/home/staff/jmoreira/.pyenv/shims/python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you try to run Python, it first looks for a &lt;code&gt;.python-version&lt;/code&gt; in the current directory to decide which version of python to run. If it doesn't find this file, then it looks for the user-level file &lt;code&gt;~/.pyenv/version&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And this is essentially all there is to it. Have fun developing Python code in a safe, environment-friendly way.&lt;/p&gt;
&lt;p&gt;Special thanks to &lt;a href="https://amaral.northwestern.edu/people/pah/"&gt;Adam Pah&lt;/a&gt; for the tips.&lt;/p&gt;</content><category term="pyenv"></category><category term="python"></category><category term="tutorial"></category></entry><entry><title>Fake mathematics is amazing</title><link href="http://jagmoreira.com/fake-mathematics-is-amazing.html" rel="alternate"></link><published>2014-03-07T00:00:00-06:00</published><updated>2014-03-07T00:00:00-06:00</updated><author><name>Joao Moreira</name></author><id>tag:jagmoreira.com,2014-03-07:/fake-mathematics-is-amazing.html</id><summary type="html">&lt;p&gt;How the apparently preposterous act of ignoring infinite values can sometimes lead to wondrous results.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, quite by accident I discovered this fact:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Divergent sum" src="http://jagmoreira.com/images/divergent_sum.png" title="What craziness is this?"&gt;&lt;/p&gt;
&lt;p&gt;If you are a social network user (like a normal individual) you probably became aware of this "equality" through the by now viral video: &lt;a href="http://www.youtube.com/watch?v=w-I6XTVZXww"&gt;http://www.youtube.com/watch?v=w-I6XTVZXww&lt;/a&gt;. If you don't use the social webz very much (like me) this might be the first time you're seeing it (although, you might have found out about the video through the twitter announcement of this blog post, in which case, never mind). Go ahead, stare at it again. I'll make it easy for you:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Divergent sum" src="http://jagmoreira.com/images/divergent_sum.png" title="What craziness is this?"&gt;&lt;/p&gt;
&lt;p&gt;I know, right? If you studied divergent series in colleges you are probably squirming in your seat and starting to enter a deep state of denial and thinking "How can he make such a preposterous claim?" Allow me to do so again:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Divergent sum" src="http://jagmoreira.com/images/divergent_sum.png" title="What craziness is this?"&gt;&lt;/p&gt;
&lt;p&gt;Don't worry I haven't forgotten my math. The above expression, although valid, is not actually a true equality, at least not in the same formal sense that 1+1=2. In fact, it's not even a new expression. It has been known since the mid-1800s and a mathematician named &lt;a href="http://en.wikipedia.org/wiki/Srinivasa_Ramanujan"&gt;Srinivasa Ramanujan&lt;/a&gt; was (&lt;a href="http://en.wikipedia.org/wiki/1_%2B_2_%2B_3_%2B_4_%2B_%C2%B7_%C2%B7_%C2%B7#History"&gt;arguably&lt;/a&gt;) the first to arrive at the odd value of -1/12 using a strange type of &lt;a href="http://en.wikipedia.org/wiki/Ramanujan_summation"&gt;summation&lt;/a&gt; that allows one to assign a value to divergent series. Another way to get at the result is using the super cool Riemman zeta function &lt;strong&gt;Z(s)&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Z(-1) = - 1/12.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After finding out about this surprising result I went to investigate and discovered a whole branch of complex analysis dedicated to obtaining results like this one. Using something called &lt;a href="http://en.wikipedia.org/wiki/Analytic_continuation"&gt;analytic continuation&lt;/a&gt; it is possible to extend the domain of some functions to regions where they not originally defined – a process you might call mathematical suspension of disbelief. It does so by redefining some of the basic high-school algebra rules. What this means is that, while analytic continuation produces perfectly logical and self-consistent results, they are not directly relatable to "real-world" mathematics.&lt;/p&gt;
&lt;p&gt;What at first seems just some number mumbo-jumbo made to wow audiences is in fact a technique with many applications in science. The particular expression showcased here is used in string theory and &lt;a href="http://en.wikipedia.org/wiki/1_%2B_2_%2B_3_%2B_4_%2B_%C2%B7_%C2%B7_%C2%B7#Physics"&gt;quantum electrodynamics&lt;/a&gt;. In 1971, Martinus J.G. Veltman and Gerardus 't Hooft, respectively professor and then graduate student in theoretical physics, used analytic continuation methods to renormalize Yang-Mills theory (particle physics stuff), a feat that would earn them the Nobel Prize in 1999. Only by ignoring divergences in intermediate calculations and daring to extend the validity of their expressions were they able to come to a final result with real-world applicability.&lt;/p&gt;
&lt;p&gt;Simply put, there is nothing you can do with a value of "infinity". It ends your calculations, it keeps theories stuck and it can't be observed or otherwise measured. In short, infinities do not exist except in mathematicians' idealizations. So, clever humans that we are, we found a way around them: by replacing infinities with logical, self-consistent and much more useful values like the one from the above sum we can overcome difficulties in our calculations and try to advance the limits of human knowledge.&lt;/p&gt;
&lt;p&gt;While mathematics can be used create wonderful tools for science, it is not, in itself a science. I like to think of it as an art form &amp;mdash; the art of creating beautiful, logical statements that need not have a concrete "physical" representation. Science is about the study of reality and as such if you find yourself proving that gravity is infinite at some point in space, speed is instantaneous or the number of universes is infinite, please do go back and re-check the tools you used. You may find that all you need is a little suspension of disbelief to come to the ultimate truth.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.slate.com/blogs/bad_astronomy/2014/01/18/follow_up_the_infinite_series_and_the_mind_blowing_result.html"&gt;Tumbling down the rabbit hole...&lt;/a&gt;&lt;/p&gt;</content><category term="math"></category></entry></feed>